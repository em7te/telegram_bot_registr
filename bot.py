import logging
import asyncio

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode

from credlib import API_TOKEN
import markup as nav
from db.sql import Database, FormSub, FormEdit, FormUnSub


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±–æ–ª—å—à–æ–π –¥–≤–æ–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ—á–Ω–æ –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–∞–∫–æ–º –æ–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = Database("db/sqlite3.db")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "–°—Ç–∞—Ä—Ç—É–µ–º! üöÄ", reply_markup=nav.user_menu_in)
    else:
        if [i for i in db.user_type(message.from_user.id)][0][0]:
            await bot.send_message(message.from_user.id, "–ë–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω ü§ñ", reply_markup=nav.artist_menu_in)
        else:
            await bot.send_message(message.from_user.id, "–ë–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω ü§ñ", reply_markup=nav.user_menu_in)
# ************************************************************* /profile


@dp.message_handler(commands=['profile'])
async def profile(message: types.Message):
    if message.message.chat.type == 'private':
        result = db.get_user(message.from_user.id)
        if [i for i in db.user_type(message.from_user.id)][0][0]:
            text = f'–í–∞—à–∏ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nid: {result[0][1]}\nnickname: {result[0][2]}\ndatetime sub: {result[0][4]}'
            await bot.send_message(message.from_user.id, text, reply_markup=nav.artist_menu_in)
        else:
            text = f'–í–∞—à–∏ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nid: {result[0][1]}\ndatetime sub: {result[0][4]}'
            await bot.send_message(message.from_user.id, text, reply_markup=nav.user_menu_in)
# ************************************************************* end /profile
# ************************************************************* /button_handler_sub


@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_sub(call: types.CallbackQuery):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormSub.artist.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id, '–í—ã —É–∂–µ —Ö—É–¥–æ–∂–Ω–∏–∫.', reply_markup=nav.artist_menu_in)
        else:
            await bot.send_message(call.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º?',
                                   reply_markup=nav.conf_menu)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormSub.artist, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ `Yes`, –ª–∏–±–æ `No`.
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormSub.artist)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    async with state.proxy() as data:
        data['artist'] = 1

    await FormSub.next()
    if call.data == 'btnConfNo':
        await call.message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav.user_menu_in)
        await state.finish()
    else:
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç nickname
@dp.message_handler(lambda message: True in [i in message.text for i in "{}[]:;]/|\.,<>!@#$%^&*"],
                    state=FormSub.nickname)
async def sub_step_3(message: types.Message):
    """
    –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    text = message.reply_markup.inline_keyboard[1][0].text
    if not isinstance(text, str) and not text[0].isdigit():
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    elif 3 > len(text) > 15:
        return await message.reply("–î–ª–∏–Ω–Ω–∞ `nickname` –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ 4 —Å–∏–º–≤–æ–ª–∞.")
    return await message.reply("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")


@dp.message_handler(state=FormSub.nickname)
async def last_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        text = message.text
        data['nickname'] = text

        # –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(message.chat.id,
                               md.text(
                                   md.text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –í—ã —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'),
                                   sep='\n',
                               ),
                               reply_markup=nav.artist_menu_in,
                               parse_mode=ParseMode.MARKDOWN)
        db.update_artist(data['artist'], message.from_user.id)
        db.update_nickname(data['nickname'], message.from_user.id)
        await asyncio.sleep(0.5)

        # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
        await state.finish()
# ************************************************************* end /button_handler_sub
# ************************************************************* /button_handler_edit


@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_edit(call: types.CallbackQuery):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormEdit.nickname.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å `nickname`?',
                                   reply_markup=nav.conf_menu)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormEdit.nickname, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ `Yes`, –ª–∏–±–æ `No`.
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormEdit.nickname)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    if call.data == 'btnConfNo':
        await call.message.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=nav.artist_menu_in)
        await state.finish()
    else:
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç nickname
@dp.message_handler(lambda message: True in [i in message.text for i in "{}[]:;]/|\.,<>!@#$%^&*"],
                    state=FormEdit.nickname)
async def sub_step_3(message: types.Message):
    """
    –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    text = message.reply_markup.inline_keyboard[1][0].text
    if not isinstance(text, str) and not text[0].isdigit():
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    elif 3 > len(text) > 15:
        return await message.reply("–î–ª–∏–Ω–Ω–∞ `nickname` –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ 4 —Å–∏–º–≤–æ–ª–∞.")
    return await message.reply("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")


@dp.message_handler(state=FormEdit.nickname)
async def last_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        text = message.text
        data['nickname'] = text

        # –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(message.chat.id,
                               md.text(
                                   md.text(f'–û—Ç–ª–∏—á–Ω–æ! `Nickname` –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {data["nickname"]}'),
                                   sep='\n',
                               ),
                               reply_markup=nav.artist_menu_in,
                               parse_mode=ParseMode.MARKDOWN)
        db.update_nickname(data['nickname'], message.from_user.id)
        await asyncio.sleep(0.5)

        # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
        await state.finish()
# ************************************************************* end /button_handler_edit
# ************************************************************* /button_handler_unsub


@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_unsub(call: types.CallbackQuery):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormUnSub.artist.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?',
                                   reply_markup=nav.conf_menu)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormUnSub.artist, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ `Yes`, –ª–∏–±–æ `No`.
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormUnSub.artist)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    async with state.proxy() as data:
        data['artist'] = 0
        data['nickname'] = ''

    if call.data == 'btnConfNo':
        await call.message.reply("–û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav.artist_menu_in)
        await state.finish()
    else:
        await call.message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav.user_menu_in)
        db.update_artist(data['artist'], call.from_user.id)
        db.update_nickname(data['nickname'], call.from_user.id)
        await state.finish()
# ************************************************************* end /button_handler_unsub


@dp.callback_query_handler(text_contains='btnIn')
async def btnIn_handler(call: types.CallbackQuery):
    if call.data == 'btnInProfile':
        await profile(call)
    elif call.data == 'btnInSubscribe':
        await button_handler_sub(call)
    elif call.data == 'btnInEditProfile':
        await button_handler_edit(call)
    elif call.data == 'btnInUnSubscribe':
        await button_handler_unsub(call)


@dp.message_handler()
async def echo(message: types.Message):
    await message.reply("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üßê")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
