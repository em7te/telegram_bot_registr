import logging
import asyncio

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from credlib import API_TOKEN
import markup as nav
from db.sql import Database
from forms import FormSub, FormEdit, FormUnSub, FormSendReq

from pprint import pprint


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±–æ–ª—å—à–æ–π –¥–≤–æ–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ—á–Ω–æ –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–∞–∫–æ–º –æ–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = Database("db/sqlite3.db")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    """
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "–°—Ç–∞—Ä—Ç—É–µ–º! üöÄ", reply_markup=nav.user_menu_in)
    else:
        if [i for i in db.user_type(message.from_user.id)][0][0]:
            await bot.send_message(message.from_user.id, "–ë–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω ü§ñ", reply_markup=nav.artist_menu_in)
        else:
            await bot.send_message(message.from_user.id, "–ë–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω ü§ñ", reply_markup=nav.user_menu_in)


# ************************************************************* START /profile
@dp.message_handler(commands=['profile'])
async def profile(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É `Profile`. –û—Ç–¥–∞—ë—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: id, create_date.
        –•—É–¥–æ–∂–Ω–∏–∫—É: id, nickname, create_date
    """
    if message.message.chat.type == 'private':
        result = db.get_user(message.from_user.id)
        if [i for i in db.user_type(message.from_user.id)][0][0]:
            text = f'–í–∞—à–∏ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nid: {result[0][1]}\nnickname: {result[0][2]}\ndatetime sub: {result[0][4]}'
            await bot.send_message(message.from_user.id, text, reply_markup=nav.artist_menu_in)
        else:
            text = f'–í–∞—à–∏ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nid: {result[0][1]}\ndatetime sub: {result[0][4]}'
            await bot.send_message(message.from_user.id, text, reply_markup=nav.user_menu_in)
# ************************************************************* END /profile


# ************************************************************* START /button_handler_sub
@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_sub(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É `Subscribe`.
        –° –µ—ë –ø–æ–º–æ—â—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º –∏ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ó–¥–µ—Å—å —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormSub.artist.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id, '–í—ã —É–∂–µ —Ö—É–¥–æ–∂–Ω–∏–∫.', reply_markup=nav.artist_menu_in)
        else:
            await bot.send_message(call.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º?',
                                   reply_markup=nav.conf_menu)


@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormSub.artist, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormSub.artist)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    async with state.proxy() as data:
        data['artist'] = 1

    await FormSub.next()
    if call.data == 'btnConfNo':
        await call.message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav.user_menu_in)
        await state.finish()
    else:
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º")


@dp.message_handler(lambda message: True in [i in message.text for i in "{}[]:;]/|\.,<>!@#$%^&*"],
                    state=FormSub.nickname)
async def sub_step_3(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç `nickname`
    """
    text = message.reply_markup.inline_keyboard[1][0].text
    if not isinstance(text, str) and not text[0].isdigit():
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    elif 3 > len(text) > 15:
        return await message.reply("–î–ª–∏–Ω–Ω–∞ `nickname` –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ 4 —Å–∏–º–≤–æ–ª–∞.")
    return await message.reply("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")


@dp.message_handler(state=FormSub.nickname)
async def last_step(message: types.Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    async with state.proxy() as data:
        text = message.text
        data['nickname'] = text

        # –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(message.chat.id,
                               '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –í—ã —Ö—É–¥–æ–∂–Ω–∏–∫ –∏ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!',
                               reply_markup=nav.artist_menu_in,
                               parse_mode=ParseMode.MARKDOWN)
        db.update_artist(data['artist'], message.from_user.id)
        db.update_nickname(data['nickname'], message.from_user.id)
        await asyncio.sleep(0.5)

        # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
        await state.finish()
# ************************************************************* END /button_handler_sub


# ************************************************************* START /button_handler_edit
@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_edit(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É `Edit profile`.
    –ú–µ–Ω—è–µ—Ç –¥–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –µ–≥–æ `nickname`

    –ó–¥–µ—Å—å —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormEdit.nickname.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å `nickname`?',
                                   reply_markup=nav.conf_menu)


@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormEdit.nickname, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormEdit.nickname)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç `button_handler_edit` –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ `sub_step_1`
    """
    if call.data == 'btnConfNo':
        await call.message.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=nav.artist_menu_in)
        await state.finish()
    else:
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç nickname
@dp.message_handler(lambda message: True in [i in message.text for i in "{}[]:;]/|\.,<>!@#$%^&*"],
                    state=FormEdit.nickname)
async def sub_step_3(message: types.Message):
    """
    –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    text = message.reply_markup.inline_keyboard[1][0].text
    if not isinstance(text, str) and not text[0].isdigit():
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    elif 3 > len(text) > 15:
        return await message.reply("–î–ª–∏–Ω–Ω–∞ `nickname` –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ 4 —Å–∏–º–≤–æ–ª–∞.")
    return await message.reply("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")


@dp.message_handler(state=FormEdit.nickname)
async def last_step(message: types.Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    async with state.proxy() as data:
        text = message.text
        data['nickname'] = text

        # –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(message.chat.id,
                               md.text(
                                   md.text(f'–û—Ç–ª–∏—á–Ω–æ! `Nickname` –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {data["nickname"]}'),
                                   sep='\n',
                               ),
                               reply_markup=nav.artist_menu_in,
                               parse_mode=ParseMode.MARKDOWN)
        db.update_nickname(data['nickname'], message.from_user.id)
        await asyncio.sleep(0.5)

        # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
        await state.finish()
# ************************************************************* END /button_handler_edit


# ************************************************************* START /button_handler_unsub
@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_unsub(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É `Unsubscribe`.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫—É –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è —Ä–æ–ª–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∏ —Å—Ç–∞—Ç—å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    –ó–¥–µ—Å—å —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormUnSub.artist.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?',
                                   reply_markup=nav.conf_menu)


@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormUnSub.artist, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormUnSub.artist)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç `button_handler_unsub` –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ `sub_step_1`, –∑–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    async with state.proxy() as data:
        data['artist'] = 0
        data['nickname'] = ''

    if call.data == 'btnConfNo':
        await call.message.reply("–û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav.artist_menu_in)
        await state.finish()
    else:
        await call.message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav.user_menu_in)
        db.update_artist(data['artist'], call.from_user.id)
        db.update_nickname(data['nickname'], call.from_user.id)
        await state.finish()
# ************************************************************* END /button_handler_unsub


# ************************************************************* START /send_request
@dp.callback_query_handler(text_contains='btnConf')
async def button_handler_send_request(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É `Send request`.
        –° –µ—ë –ø–æ–º–æ—â—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—Ö—É–¥–æ–∂–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.

    –ó–¥–µ—Å—å —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    await asyncio.sleep(0.5)
    await FormSendReq.text.set()

    message_dict = call.message
    if message_dict.chat.type == 'private':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            await bot.send_message(call.from_user.id,
                                   '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –¥—Ä—É–≥–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç–∏–Ω—É?',
                                   reply_markup=nav.conf_menu)
        else:
            await bot.send_message(call.from_user.id,
                                   '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç–∏–Ω—É?',
                                   reply_markup=nav.conf_menu)


@dp.callback_query_handler(lambda call: call.data not in ["btnConfYes", "btnConfNo"],
                           state=FormSendReq.text, text_contains='btnConf')
async def sub_step_1(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: Yes –∏–ª–∏ No (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ["btnConfYes", "btnConfNo"])
    """
    return await call.message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞—Ä–∏–∞–Ω—Ç—ã: `Yes`, `No`.", reply_markup=nav.conf_menu)


@dp.callback_query_handler(state=FormSendReq.text)
async def sub_step_2(call: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç `button_handler_send_request` –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ `sub_step_1`
    """
    if call.data == 'btnConfNo':
        if [i for i in db.user_type(call.from_user.id)][0][0]:
            # –æ—Ç–≤–µ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫—É
            await bot.send_message(call.from_user.id, '–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω—ã –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=nav.artist_menu_in)
        else:
            # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(call.from_user.id, '–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω—ã –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=nav.user_menu_in)
        await state.finish()
    else:
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã")


@dp.message_handler(lambda message: 3 > len(message.text) > 15, state=FormSendReq.text)
async def sub_step_3(message: types.Message):
    """
    –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç 3 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤.")


@dp.message_handler(state=FormSendReq.text)
async def last_step(message: types.Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    """
    async with state.proxy() as data:
        text = message.text
        data['text'] = text

        # –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot_answer = f'–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º.'
        type_user = [i for i in db.user_type(message.chat.id)][0][0]
        if type_user:
            await bot.send_message(message.chat.id, bot_answer, reply_markup=nav.artist_menu_in,
                                   parse_mode=ParseMode.MARKDOWN)

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º/—Ö—É–¥–æ–∂–Ω–∏–∫–æ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω—É
            db_list = db.show_artists()
            bot_answer = f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.chat.id}\n–û–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: `{text}`'
            [await bot.send_message(i, bot_answer, reply_markup=nav.request_menu_in_not_accept) for i in db_list]
        else:
            await bot.send_message(message.chat.id, bot_answer, reply_markup=nav.user_menu_in,
                                   parse_mode=ParseMode.MARKDOWN)
        db.add_request(data['text'], message.from_user.id)

        await asyncio.sleep(0.5)
        # –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
        await state.finish()
# ************************************************************* END /send_request


# ************************************************************* START /show_requests
@dp.message_handler(commands=['requests'])
async def show_requests(message: types.Message):
    if message.message.chat.type == 'private':
        if message.data == 'btnInShowRequests':
            quantity = 3

            # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É —Å –ë–î –æ—Ç `show_requests` –∏ –æ—Ç—Å–µ–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            result = [i for i in db.show_requests() if i[3] != 'closed' and i[3] != 'completed'][-quantity:]

            for i in range(quantity):
                text = f'id request: {result[i][0]}\n' \
                       f'user id: {result[i][1]}\n' \
                       f'text request: {result[i][2]}\n' \
                       f'date: {result[i][5]}'
                if result[i][3] == 'not accepted':
                    await bot.send_message(message.from_user.id, text, reply_markup=nav.request_menu_in_not_accept)
                if result[i][3] == 'accepted':
                    await bot.send_message(message.from_user.id, text, reply_markup=nav.request_menu_in_accepted)
        elif message.data == 'btnInShowAcceptedRequests':
            quantity = 3

            # —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ –∏ –≤—ã—à–µ –≤ `if`
            result = [i for i in db.show_accepted_request(message.from_user.id) if i[3] != 'closed' and i[3] != 'completed'][-quantity:]
            if len(result):
                for i in range(len(result)):
                    text = f'id request: {result[i][0]}\n' \
                           f'user id: {result[i][1]}\n' \
                           f'text request: {result[i][2]}\n' \
                           f'date: {result[i][5]}'
                    if result[i][3] != 'completed' and result[i][3] != 'closed':
                        await bot.send_message(message.from_user.id, text, reply_markup=nav.request_menu_in_accepted)
            else:
                await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
                                       reply_markup=nav.request_menu_in_accepted)
# ************************************************************* END /show_requests


# ************************************************************* START /update_request
@dp.message_handler(commands=['requests'])
async def update_request(message: types.Message):
    if message.message.chat.type == 'private':
        request_text = message.message.text[12:]
        request_id = request_text[:(request_text.find("u")) - 1]
        if message.data == 'btnInAccept':
            text = '–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            db.update_request(message.message.chat.id, 'accepted', request_id)
            await bot.send_message(message.from_user.id, text, reply_markup=nav.request_menu_in_accepted)
        elif message.data == 'btnInClose':
            text = '–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            db.update_request(message.message.chat.id, 'closed', request_id)
            await bot.send_message(message.from_user.id, text, reply_markup=nav.artist_menu_in)
        elif message.data == 'btnInCompleted':
            text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            db.update_request(message.message.chat.id, 'completed', request_id)
            await bot.send_message(message.from_user.id, text, reply_markup=nav.artist_menu_in)
# ************************************************************* END /update_request


# ************************************************************* START /update_request
@dp.message_handler(commands=['back'])
async def back(message: types.Message):
    if message.message.chat.type == 'private':
        await bot.send_message(message.from_user.id, 'Menu', reply_markup=nav.artist_menu_in)
# ************************************************************* END /update_request


@dp.callback_query_handler(text_contains='btnIn')
async def btnIn_handler(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    if call.data == 'btnInProfile':
        await profile(call)
    elif call.data == 'btnInSubscribe':
        await button_handler_sub(call)
    elif call.data == 'btnInEditProfile':
        await button_handler_edit(call)
    elif call.data == 'btnInUnSubscribe':
        await button_handler_unsub(call)
    elif call.data == 'btnInSendRequest':
        await button_handler_send_request(call)
    elif call.data == 'btnInShowRequests' or call.data == 'btnInShowAcceptedRequests':
        await show_requests(call)
    elif call.data == 'btnInAccept' or call.data == 'btnInCompleted' or call.data == 'btnInClose':
        await update_request(call)
    elif call.data == 'btnInBack':
        await back(call)


@dp.message_handler()
async def echo(message: types.Message):
    """
    –≠—Ö–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –Ω–µ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ.
    """
    if [i for i in db.user_type(message.from_user.id)][0][0]:
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üßê",
                               reply_markup=nav.artist_menu_in)
    else:
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üßê",
                               reply_markup=nav.user_menu_in)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
